@model List<SignInSignUp.Models.VendorTable>
@{
    ViewBag.Title = "Vendors";
}

<!DOCTYPE html>
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <style>
        .pagination-container {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .pagination-container a {
            padding: 8px 12px;
            margin: 0 4px;
            border: 1px solid #ddd;
            background-color: #fff;
            color: #333;
            text-decoration: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .pagination-container a.active {
            background-color: #007bff;
            color: #fff;
            border-color: #007bff;
        }

        .main_container {
            margin: 2px 0px 2px 15px;
            text-align: center;
            /*background-color: ;*/
        }

        .custom-table {
            border: 2px solid #EDE4FF;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

            .custom-table thead th {
                background-color: #F6F1FF;
            }
    </style>
</head>

<body style="background-color: #F8F3FF ">
    <div class="main_container">
        <h2 class="mb-4">Vendors</h2>
        <div class="top-button">
            <a class="btn btn-secondary add_new_vendor" href="@Url.Action("Create", "Vendors")" role="button">Add New Vendor</a>
        </div>
        <table class="table custom-table table-bordered border-4">
            <thead class="thead border-4">
                <tr>
                    <th scope="col" class="border">S.No</th>
                    <th scope="col" class="border">Vendor Name</th>
                    <th scope="col" class="border">Contact Person</th>
                    <th scope="col" class="border">Email</th>
                    <th scope="col" class="border">Contact No</th>
                    <th scope="col" class="border">Action</th>
                </tr>
            </thead>
            <tbody>
                @for (int j = 0; j < 10*Model.Count(); j++)
                {
                    int i = j % Model.Count();
                    if (Model[i].email.Count() == 0)
                    {
                        Model[i].email = "N/A";
                    }
                    <tr>
                        <th scope="row" class="border">@(j+1)</th>
                        <td class="border">@Model[i].vendorName</td>
                        <td class="border">@Model[i].name</td>
                        <td class="border">@Model[i].email</td>
                        <td class="border">@Model[i].phone</td>
                        <td class="border">
                            <a href="@Url.Action("Details", "Vendors", new { id = Model[i].vendorID })" style="color: #A076F9; "> <i class="fa-regular fa-eye"></i></a>
                            <a href="@Url.Action("Edit", "Vendors", new { id = Model[i].vendorID })" style="color: #A076F9; "> <i class="fa-regular fa-pen-to-square"></i></a>
                            <a href="#" class="delete-btn" data-vendorid="@Model[i].vendorID" data-toggle="modal" data-target="#myModal" style="color: #A076F9; "> <i class="fa-sharp fa-solid fa-trash"></i></a>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
        <div class="pagination-container" id="vendorPagination">
            <!-- Pagination links will be generated dynamically here -->
        </div>
    </div>

    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <!-- Add your content here -->
                    <p>Are you sure you want to delete the following vendor?</p>

                    <table>
                        <tr>
                            <th>Vendor ID:</th>
                            <td id="vendorId"></td>
                        </tr>
                        <tr>
                            <th>Vendor Name:</th>
                            <td id="vendorName"> </td>
                        </tr>
                        <!-- Include other vendor details as needed -->
                    </table>
                </div>
                <div class="modal-footer">
                    @using (Html.BeginForm("DeleteConfirmed", "Vendors", FormMethod.Post))
                    {
                        @Html.Hidden("id", null, new { id = "deleteVendorId" })
                        <button type="submit" class="btn btn-danger">Delete</button>
                    }
                    <button type="button" class="btn btn-warning" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    <script>
    $(document).ready(function () {
        // Function to handle deletion button click
        $('.delete-btn').click(function () {
            var vendorId = $(this).data('vendorid');
            $('#deleteVendorId').val(vendorId);
            $('#vendorId').text(vendorId);
            $('#vendorName').text($(this).closest('tr').find('td:nth-child(2)').text());
        });

        // Define a JavaScript variable for Model.Count
        var originalItemCount = 10*@Model.Count;
        var itemCount = originalItemCount;

        // Define a JavaScript variable for the number of items per page
        var itemsOnPage = 5;

        // Function to handle smart pagination changes
        function handleSmartPagination(pageIndex) {
            var totalPages = Math.ceil(itemCount / itemsOnPage);
            var maxPagesToShow = 3; // Number of pagination buttons to show

            var startPageIndex = pageIndex - Math.floor(maxPagesToShow / 2);
            var endPageIndex = pageIndex + Math.floor(maxPagesToShow / 2);

            if (startPageIndex < 0) {
                endPageIndex -= startPageIndex;
                startPageIndex = 0;
            }

            if (endPageIndex >= totalPages) {
                startPageIndex -= endPageIndex - totalPages + 1;
                endPageIndex = totalPages - 1;
            }

            if (startPageIndex < 0) {
                startPageIndex = 0;
            }

            // Generate pagination links with ellipsis
            var paginationHtml = '';
            if (startPageIndex > 0) {
                paginationHtml += '<a href="#" data-index="0">1</a>';
                if (startPageIndex > 1) {
                    paginationHtml += '<span>...</span>';
                }
            }

            for (var i = startPageIndex; i <= endPageIndex; i++) {
                if (i === pageIndex) {
                    paginationHtml += '<a href="#" data-index="' + i + '" class="active">' + (i + 1) + '</a>';
                } else {
                    paginationHtml += '<a href="#" data-index="' + i + '">' + (i + 1) + '</a>';
                }
            }

            if (endPageIndex < totalPages - 1) {
                if (endPageIndex < totalPages - 2) {
                    paginationHtml += '<span>...</span>';
                }
                paginationHtml += '<a href="#" data-index="' + (totalPages - 1) + '">' + totalPages + '</a>';
            }

            $("#vendorPagination").html(paginationHtml);

            // Calculate the starting and ending indexes for the data to display on the current page
            var startIndex = pageIndex * itemsOnPage;
            var endIndex = (pageIndex + 1) * itemsOnPage;

            // Hide all rows
            $("tbody tr").hide();

            // Show the rows for the current page
            for (var j = startIndex; j < endIndex && j < originalItemCount; j++) {
                var i = j % originalItemCount;
                $("tbody tr:eq(" + i + ")").show();
            }
        }

        // Attach event handler to the parent element of pagination links
        $(document).on('click', '.pagination-container a', function () {
            var pageIndex = parseInt($(this).data('index'));
            handleSmartPagination(pageIndex);
        });

        // Initial page
        handleSmartPagination(0);
    });
    </script>




</body>



</html>